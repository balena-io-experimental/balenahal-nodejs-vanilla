/**
 * balenahal
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";


export default class GpioApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    callExportWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling callExport");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    callExport(pin) {
      return this.callExportWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getDirectionWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling getDirection");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/gpio/get-direction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getDirection(pin) {
      return this.getDirectionWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getValueWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling getValue");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/gpio/get-value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getValue(pin) {
      return this.getValueWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    setDirectionWithHttpInfo(pin, direction) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling setDirection");
      }
      // verify the required parameter 'direction' is set
      if (direction === undefined || direction === null) {
        throw new Error("Missing the required parameter 'direction' when calling setDirection");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin,
        'direction': direction
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/set-direction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    setDirection(pin, direction) {
      return this.setDirectionWithHttpInfo(pin, direction)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    setValueWithHttpInfo(pin, value) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling setValue");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling setValue");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin,
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/set-value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    setValue(pin, value) {
      return this.setValueWithHttpInfo(pin, value)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    unexportWithHttpInfo(pin) {
      let postBody = null;
      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling unexport");
      }

      let pathParams = {
      };
      let queryParams = {
        'pin': pin
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gpio/unexport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    unexport(pin) {
      return this.unexportWithHttpInfo(pin)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
