/**
 * balenahal
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";


export default class LedsApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    offWithHttpInfo(led) {
      let postBody = null;
      // verify the required parameter 'led' is set
      if (led === undefined || led === null) {
        throw new Error("Missing the required parameter 'led' when calling off");
      }

      let pathParams = {
      };
      let queryParams = {
        'led': led
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/leds/off', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    off(led) {
      return this.offWithHttpInfo(led)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    onWithHttpInfo(led) {
      let postBody = null;
      // verify the required parameter 'led' is set
      if (led === undefined || led === null) {
        throw new Error("Missing the required parameter 'led' when calling on");
      }

      let pathParams = {
      };
      let queryParams = {
        'led': led
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/leds/on', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    on(led) {
      return this.onWithHttpInfo(led)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
